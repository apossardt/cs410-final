/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProjectGUI;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.WindowConstants;

/**
 *
 * @author Steve
 */


public class SMSForm extends javax.swing.JDialog {

    /**
     * Creates new form SMSForm
     */
    public SMSForm(java.awt.Frame parent, boolean modal,int smsMode) {
        super(parent, modal);
        initComponents();
        smsCounter = 0;
        smsCondition = smsMode;
        getSMSText();
        startTime = System.currentTimeMillis();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSendResponse = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtResponse = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessage = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModal(true);
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMessageFocusGained(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnSendResponse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnSendResponse.setText("Send");
        btnSendResponse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendResponseActionPerformed(evt);
            }
        });

        txtResponse.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(txtResponse);

        txtMessage.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtMessage.setText("A Friend: What do you wanna do when you get out of here?");
        txtMessage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtMessageFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(txtMessage);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSendResponse)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(btnSendResponse)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getSMSText()
    {
                try
        {
            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
            //Get a connection
            conn = DriverManager.getConnection(dbURL); 
        }
        catch (Exception except)
        {
            except.printStackTrace();
        }
        
        try
        {
            stmt = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            ResultSet results = stmt.executeQuery("select * from " + tableName);
            ResultSetMetaData rsmd = results.getMetaData();
            
            results.last();
            int rows = results.getRow();
            // Move to beginning
            results.beforeFirst();

            smsTexts=new String[rows];
            
            int counter=0;
            while(results.next())
            {
                smsTexts[counter]= results.getString(2);
                counter++;
            }
            results.close();
            stmt.close();
        }
        catch (SQLException sqlExcept)
        {
            sqlExcept.printStackTrace();
        }
    
    }
    public void addListener(SMSFormListener toAdd) {
        listeners.add(toAdd);
    }

    public void SMSFormCompleteEvent() {
        SMSFormResults args = new SMSFormResults(this,totalTime,smsTexts[smsCounter-1],response,wordCount,smsCounter);
        for (SMSFormListener hl : listeners)
            hl.smsFormComplete(args);
    }
    
    public void setStartTime()
    {
        startTime = System.currentTimeMillis();
    }
    private void btnSendResponseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendResponseActionPerformed
        try {
            // I imagine we want to prevent closing, but too much validation would make it less realistic.
            // We'll have to discuss with Dr. Bowman.
            if (txtResponse.getText().compareTo("") != 0) {
                // Make note of time, response text and word count, sending them to the Project Manager instance.
                
                endTime = System.currentTimeMillis();
                totalTime = (endTime - startTime) /1000.0;
                response = txtResponse.getText();
                txtResponse.setText("");
                wordCount = response.split(" ").length;
                smsCounter++;
                
                SMSFormCompleteEvent();
                txtMessage.setText(txtMessage.getText()+ System.getProperty("line.separator")+ "Me:"+response);
                
                
                if(smsCounter >= 5)
                {
                    this.setVisible(false);
                    //this.dispose();
                }
                if(smsCounter != 5)
                {
                     if(smsCondition == 3 || smsCondition == 4)
                    {
                        
                        this.setVisible(false);
                    }
                     txtMessage.setText(txtMessage.getText() + System.getProperty("line.separator")+ "A Friend:"+smsTexts[smsCounter]);
                }

            }
        }
        catch (Exception ex) {
            // Log exception?
        }
    }//GEN-LAST:event_btnSendResponseActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
            
            // Make note of start time
            
            txtMessage.setEditable(false);
            txtResponse.grabFocus();
        }
        catch (Exception ex) {
            // Log exception?
        }
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            // I imagine we want to prevent closing, but too much validation would make it less realistic.
            // We'll have to discuss with Dr. Bowman.
            if (txtResponse.getText().compareTo("") != 0) {
                this.dispose();
            }
        }
        catch (Exception ex) {
            // Log exception?
        }
    }//GEN-LAST:event_formWindowClosing

    private void txtMessageFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtMessageFocusGained
        startTime = System.currentTimeMillis();
    }//GEN-LAST:event_txtMessageFocusGained


private final ArrayList<SMSFormListener> listeners = new ArrayList<>();

    private String[] smsTexts;
    private String response;
    private int wordCount,smsCounter;
    private long startTime,endTime;
    private double totalTime;
    private int smsCondition;
    
    private static String dbURL = "jdbc:derby://localhost:1527/sidresDB;create=true;user=sidresAdmin;password=1x!Software";
    private static String tableName = "SMSTEXT";
    // jdbc Connection
    private static Connection conn = null;
    private static Statement stmt = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSendResponse;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane txtMessage;
    private javax.swing.JTextPane txtResponse;
    // End of variables declaration//GEN-END:variables
}
